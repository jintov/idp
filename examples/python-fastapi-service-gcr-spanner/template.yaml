apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: python-fastapi-service-gcr-spanner
  title: Python FastAPI Service + Google Cloud Run + Cloud Spanner
  description: Create a Python FastAPI service running in Google Cloud Run with Cloud Spanner as the data store
spec:
  owner: de-ims
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Service / Application details
      required:
        - name
        - description
        - iRiskId
        - dataClassification
        - costCenter
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the service
          ui:autofocus: true
          ui:options:
            rows: 3
          ui:placeholder: |
            Enter the service name without any whitespaces
        description:
          title: Description
          type: string
          description: Details about the service
          ui:options:
            rows: 3
          ui:placeholder: |
            Enter a description that appears in the software catalog
        iRiskId:
          title: iRisk Id
          type: string
          description: iRisk Id for this service
          ui:options:
            rows: 3
        dataClassification:
          title: Data Classification
          type: string
          description: Sensitivity of the data stored and/or processed by this service
          default: Business Use
          enum: [Public, Business Use, Highly Restricted, Secret]
          ui:options:
            rows: 3
        costCenter:
          title: Cost Center
          type: string
          description: Cost center associated with this service
          ui:options:
            rows: 3
    - title: Repository details
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
    - title: Infrastructure details
      required:
        - gcpProjectId
        - resourceUserGroup
        - resourceAdminGroup
      properties:
        gcpProjectId:
          title: GCP Project ID
          type: string
          description: ID of an existing GCP project 
          ui:autofocus: true
          ui:options:
            rows: 3
        resourceUserGroup:
          title: Resource User Group
          type: string
          description: Members of this Genie group will have access to all the resources being provisioned (repo, pipelines, infrastructure)
          ui:options:
            rows: 3
        resourceAdminGroup:
          title: Resource Admin Group
          type: string
          description: Members of this Genie group will have administrative access to the resources being provisioned
          ui:options:
            rows: 3

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        values:
          name: ${{ parameters.name }}

    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
